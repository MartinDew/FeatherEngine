name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-linux:
    name: Linux Build (${{ matrix.config }})
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release, Development]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install latest Clang
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 19
        sudo apt-get install -y ninja-build
        sudo apt-get install build-essential git make \
        pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
        libaudio-dev libfribidi-dev libjack-dev libsndio-dev libx11-dev libxext-dev \
        libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev \
        libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
        libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev
    
    # - name: Set Clang as default compiler
    #   run: |
    #     echo "CC=clang-19" >> $GITHUB_ENV
    #     echo "CXX=clang++-19" >> $GITHUB_ENV
    
    - name: Verify compiler version
      run: |
        clang++-19 --version
        cmake --version
    
    - name: Configure CMake
      run: |
        cmake --preset ${{ matrix.config == 'Debug' && 'debug' || matrix.config == 'Release' && 'release' || 'development' }}
    
    - name: Build Editor
      run: |
        cmake --build --preset ${{ matrix.config == 'Debug' && 'debug' || matrix.config == 'Release' && 'release' || 'development' }} --target Editor
    
    - name: Build Standalone
      run: |
        cmake --build --preset ${{ matrix.config == 'Debug' && 'debug' || matrix.config == 'Release' && 'release' || 'development' }}  --target Standalone
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.config }}-binaries
        path: |
          build/*/bin/Editor
          build/*/bin/Standalone
        retention-days: 7

  build-windows:
    name: Windows Build (${{ matrix.config }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release, Development]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
    
    - name: Setup Clang-CL environment
      run: |
        echo "CC=clang-cl" >> $env:GITHUB_ENV
        echo "CXX=clang-cl" >> $env:GITHUB_ENV
        echo "C:\Program Files\LLVM\bin" >> $env:GITHUB_PATH
    
    - name: Verify compiler
      run: |
        clang-cl --version
        cmake --version
      shell: pwsh
    
    - name: Configure CMake with Clang-CL
      run: |
        cmake --preset windows -T ClangCL
      shell: pwsh
    
    - name: Build Editor (${{ matrix.config }})
      run: |
        cmake --build build/windows --config ${{ matrix.config }} --target Editor
      shell: pwsh
    
    - name: Build Standalone (${{ matrix.config }})
      run: |
        cmake --build build/windows --config ${{ matrix.config }} --target Standalone
      shell: pwsh
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.config }}-binaries
        path: |
          build/windows/bin/${{ matrix.config }}/Editor.exe
          build/windows/bin/${{ matrix.config }}/Standalone.exe
        retention-days: 7

  build-macos:
    name: macOS Build (${{ matrix.config }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release, Development]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install latest LLVM
      run: |
        brew install llvm@19 ninja
        echo "$(brew --prefix llvm@19)/bin" >> $GITHUB_PATH
    
    - name: Set Clang as default compiler
      run: |
        echo "CC=$(brew --prefix llvm@19)/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm@19)/bin/clang++" >> $GITHUB_ENV
    
    - name: Verify compiler version
      run: |
        $(brew --prefix llvm@19)/bin/clang++ --version
        cmake --version
    
    - name: Configure CMake
      run: |
        cmake --preset ${{ matrix.config == 'Debug' && 'debug' || matrix.config == 'Release' && 'release' || 'development' }}
    
    - name: Build Editor
      run: |
        cmake --build --preset ${{ matrix.config == 'Debug' && 'debug' || matrix.config == 'Release' && 'release' || 'development' }} --target Editor
    
    - name: Build Standalone
      run: |
        cmake --build --preset ${{ matrix.config == 'Debug' && 'debug' || matrix.config == 'Release' && 'release' || 'development' }} --target Standalone
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.config }}-binaries
        path: |
          build/*/bin/Editor
          build/*/bin/Standalone
        retention-days: 7

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        echo "Linux build: ${{ needs.build-linux.result }}"
        echo "Windows build: ${{ needs.build-windows.result }}"
        echo "macOS build: ${{ needs.build-macos.result }}"
        
        if [ "${{ needs.build-linux.result }}" != "success" ] || \
           [ "${{ needs.build-windows.result }}" != "success" ] || \
           [ "${{ needs.build-macos.result }}" != "success" ]; then
          echo "One or more builds failed!"
          exit 1
        fi
        
        echo "All builds succeeded!"